#!/bin/bash
#     ji-gitrel-mvn-1.0.1 - grelb
#
#     Copyright (c) 2014,2015 Jirvan Pty Ltd
#     All rights reserved.
#
#     Redistribution and use in source and binary forms, with or without modification,
#     are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#     * Neither the name of Jirvan Pty Ltd nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

source gitrellib.sh

verifyNoUncommittedChanges
verifyNoUnpushedCommits

# Get the version to branch from
RELEASE_VERSION=`printMostRecentVersion`
while true; do
    echo
    if [ "$RELEASE_VERSION" != "" ]
    then
        read -p "   Release version to branch from [$RELEASE_VERSION] ? " value
    else
        read -p "   Release version to branch from ? " value
    fi
    if [ "$value" != "" ]
    then
        filteredValue=`filterOutInvalidVersions "$value"`
        if [ "$filteredValue" = "" ]
        then
            echo "   \"$value\" is an invalid version, please re-enter"
        else
            RELEASE_VERSION="$filteredValue"
            break
        fi
    else
        if [ "$RELEASE_VERSION" = "" ]
        then
            echo "   Please enter the release version to branch from"
        else
            break
        fi
    fi
done

# Get the version direction
NEXT_SERIAL_VERSION=`printSerialVersion $RELEASE_VERSION`
NEXT_CHILD_VERSION=`printNextBranchVersionFor $RELEASE_VERSION`
echo
echo "   Please choose a \"direction\" for the new version"
echo
echo "     1:  Serial (i.e. $RELEASE_VERSION -> $NEXT_SERIAL_VERSION)"
echo "     2:  Child  (i.e. $RELEASE_VERSION -> $NEXT_CHILD_VERSION)"
CHOICE=""
while true; do
    echo
    if [ "$CHOICE" != "" ]
    then
        read -p "   Choose a number [$CHOICE] ? " value
    else
        read -p "   Choose a number ? " value
    fi
    if [ "$value" != "" ]
    then
        let numberChoice=0+$value
        if [ $numberChoice -lt 1 ] || [ $numberChoice -gt 2 ]
        then
            echo "   $value is not a valid choice, please re-enter"
        else
            CHOICE="$numberChoice"
            break
        fi
    else
        echo "   Please enter the number of the item to choose"
    fi
done
if [ "$CHOICE" == "1" ]
then
    BRANCH_VERSION=$NEXT_SERIAL_VERSION
elif [ "$CHOICE" == "2" ]
then
    BRANCH_VERSION=$NEXT_CHILD_VERSION
else
        echo
        echo "ERROR: Unexpected choice \"$CHOICE\""
        echo
        exit 1
fi

# Get the branch name
BRANCH_NAME=""
while true; do
    echo
    if [ "$BRANCH_NAME" != "" ]
    then
        read -p "   New branch name [$BRANCH_NAME] ? " value
    else
        read -p "   New branch name ? " value
    fi
    if [ "$value" != "" ]
    then
        BRANCH_NAME="$value"
        break
    else
        echo "   Please enter the new branch name"
    fi
done


checkout "v$RELEASE_VERSION"
checkoutOnANewBranch "$BRANCH_NAME"
updatePomfileVersions "$BRANCH_VERSION"-SNAPSHOT
addAllModificationsAndCommitWithMessage "Updating poms for ""$BRANCH_VERSION""-SNAPSHOT development"
echo
